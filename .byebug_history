quit
@app
env
quit
val
key
quit
req.cookies
req
quit
JSON.parse(cookie)["notice"]
quit
JSON.parse(cookie)["notice"]
cookie
JSON.parse(cookie)
req.cookies['_rails_lite_app']
session
cookie
quit
cookie
quit
req.cookies
req
quit
JSON.parse(req.cookies['_rails_lite_app_flash'])
JSON.parse(req.cookies['_rails_lite_app_flash']
JSON.parse
req.cookies['_rails_lite_app']
req.cookies['_rails_lite_app_flash']
req.cookies
req
quit
cookie
quit
self[:notice]
quit
self.now
self[:errors]
self
quit
cookie
quit
self[:notice]
self
quit
self['notice']
self
quit
self[:notice]
self
self[:notice]
self['notice']
self
quit
self['notice']
self[:notice]
self
res['Set-Cookie']
res[
quit
res['Set-Cookie']
res
@cookie
@cookie[:notice]
@cookie
quit
@cookie.to_json
@cookie
@cookie[key] = val
key
quit
flash[:notice]
session
flash
session
quit
content
flash
quit
@flash
flash['notice']
flash
c
res
res.set_cookie('_rails_lite_app_flash', { path: :/, value: @cookie.to_json} )
res
quit
res.set_cookie('rails_lite_app_flash', { path: :/, value: @cookie.to_json} )
@cookie
@cookie[key] = val
val
key
quit
ERB.new(file_content).result(binding)
quit
file_content
ERB.new(file_content).result(binding)
ERB.new(file_content)
file_content
ERB.new(file_content).result(binding)
quit
n
file_content
quit
req.cookies
quit
@cookie
key
quit
res.set_cookie('_rails_lite_app', { path: :/, value: @cookie.to_json} )
res
quit
req.params.merge(route_params)
req.params
quit
route_params
quit 
@pattern.match(req.path)
req.path
req.url
@pattern
match_data
route_params
quit
res.body
route_params
req.params
quit
match_data
quit
@pattern
req.url
match_data
quit
req.url
@pattern
match_data
c
quit
@pattern
exit
req.url.class
req.url
c
match_data
quit
@pattern.match(req.url)
req.url
req.ur
@pattern.match(@pattern.to_s)
@pattern.class
Regexp.new '/users/(?<id>\d+)'
regex.match("/users/42")
m = regex.match("/users/42")
regex
@pattern
match_data.names
match_data
c
quit
match_data
c
quit
@pattern.to_s
@pattern
c
exit
n
match_data
n
regex
n
@pattern
quit
match_data = Regexp.new '#{@pattern}'
match_data = Regexp.new '#{pattern}'
pattern
quit
routes.instance_eval(&proc)
routes
quit
proc
&proc
quit
res.pattern
res
@action_name
req
req.controller_class
DummyController.new
String.new
@controller_class.class
@controller_class
@controller_class.new
@controller_class
quit
controller_class
req.path
req
quit
req
quit
proc.call
&proc
quit
yield
proc.call
prc.call
quit
res.status
req.status
req
quit
req.path
req.route
req
@routes.first.to_s
@routes.first
@routes
req.path
req
subject
req.route
req
quit
 router.get Regexp.new("^/users$"), ControllerBase, :index
quit
qui
 router.get Regexp.new("^/users$"), ControllerBase, :index
quit
router.get Regexp.new("^/users$"), ControllerBase, :index
router
quit
define_method(http_method) {|pattern,method,controller_class,action_name| add_route }
quit
req.request_method == index_route.http_method.to_s.upcase
req.request_method == index_route.http_method
req.request_method
req
index_route.http_method == req.request
@index_route
@index_route.http_method == req.request
index_route.pattern =~ req.path
index_route.pattern
req.path
index_route.pattern =~ req.path
index_route.http_method
index_route.pattern
pattern
@pattern
index_route.matches?(req)
index_route
quit
index_route
req.path
req
